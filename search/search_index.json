{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wingspan Gym","text":"<p>Implementation of board game Wingspan that follows Gymnasium spec.</p> <p>Purpose of this repo is entirely for educational purposes, and it should not be used instead of playing actual wingspan. If that's what you are planning to do, see Stonemaier's page to see possibilities.</p> <p>The main reason why this was made, is because I am interested if there is a way to provide a statistical analysis backing strategies listed in Wingsplain. It's also a cool project, and my work essentially forbids me from working on anything robotics related </p> <p>Warning</p> <p>Package is still not stable, and functionality is not compatible with the spec of Gymnasium. It also has missing features that do not match fully to wingspan game yet. See roadmap in a section below.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can <code>pip install wingspan-gym</code>.</p> <p>Note</p> <p>If you are installing directly from python sdist (i.e. you are not on OS/arch I've pre-built the package for). You might need to install rustup first.</p>"},{"location":"#roadmap","title":"Roadmap","text":"<p>As mentioned above the repo is still very much in a development state. Following roadmap lists all of the features, roughly in order of priority (though things might change):</p> <ol> <li>Create a better test suite for verifying code correctness (currently done mostly by hand).</li> <li>Implement all of the missing core bird actions.</li> <li>Implement all of the end of round goals.</li> <li>Somewhere here I want to implement a very basic, ncurses based terminal UI to play the game for easier testing, and debugging edge-cases.</li> <li>Define state, and expose it to python.</li> <li>Have spec match one of the gymnasium environment</li> <li>This is probably where v1 is cut</li> <li>Implement expansions in order of release. Each will probably result in major version bumps, due to breaking changes.</li> </ol> <p>Anything beyond this is out of scope for the project. I want to provide some examples of running the code with a RL agent, but haven't decided on details yet.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>First of all: Thank You! If you see an issue, and decide to do something about it (either report it, or make a PR), it's great!</p> <p>See sections below on more details</p>"},{"location":"contributing/#creating-issues","title":"Creating Issues","text":"<p>I'm using GitHub Issues to track problems. Please, search in roadmap and in open issues first before making a new one to avoid duplication. If you think your issue is unique, make one. There is no templates. This repo is meant to be tiny.</p>"},{"location":"contributing/#writing-code","title":"Writing code","text":"<p>We use uv and Rust (install via rustup). Given that package is targeting python, I do not really care about Rust version, and I try to stay on the latest one (CI does!). This might change if it becomes a pain to maintain. To start working on a package:</p> <ol> <li>Run <code>uv sync</code> - This will install any packages. Typically needs to be only done once.</li> <li>Then make changes to code you want</li> <li>Run <code>uv run maturin develop</code> to built a package into current environment for testing</li> <li>Repeat 2 + 3</li> <li>Open a PR</li> </ol>"},{"location":"examples/random_players_playing_bird_cards/","title":"Random players playing bird cards","text":"In\u00a0[\u00a0]: Copied! <pre>import wingspan_gym\nfrom wingspan_gym._internal import StepResult\nimport random\n</pre> import wingspan_gym from wingspan_gym._internal import StepResult import random In\u00a0[\u00a0]: Copied! <pre>import wingspan_gym.game\n</pre> import wingspan_gym.game In\u00a0[\u00a0]: Copied! <pre>VERBOSE = True\n</pre> VERBOSE = True In\u00a0[\u00a0]: Copied! <pre>class DummyHeuristic:\n    def __init__(self, env: wingspan_gym.game.WingspanEnv):\n        self.env = env\n        self.tried_to_play_a_card = False\n        self.played_a_card = False\n\n    def get_next_action(self):\n        action_type = self.env.next_action()\n        if not self.played_a_card and str(action_type) == \"ChooseAction\":\n            if not self.tried_to_play_a_card:\n                self.tried_to_play_a_card = True\n                return 0\n            else:\n                # Tried to play a card and failed\n                # Get food then\n                return 1\n\n        # No longer choose action, so this works I think\n        if self.tried_to_play_a_card:\n            self.played_a_card = True\n\n        self.tried_to_play_a_card = False\n\n        return random.randint(0, self.env.action_space_size())\n</pre> class DummyHeuristic:     def __init__(self, env: wingspan_gym.game.WingspanEnv):         self.env = env         self.tried_to_play_a_card = False         self.played_a_card = False      def get_next_action(self):         action_type = self.env.next_action()         if not self.played_a_card and str(action_type) == \"ChooseAction\":             if not self.tried_to_play_a_card:                 self.tried_to_play_a_card = True                 return 0             else:                 # Tried to play a card and failed                 # Get food then                 return 1          # No longer choose action, so this works I think         if self.tried_to_play_a_card:             self.played_a_card = True          self.tried_to_play_a_card = False          return random.randint(0, self.env.action_space_size()) In\u00a0[\u00a0]: Copied! <pre>env = wingspan_gym.game.WingspanEnv()\n</pre> env = wingspan_gym.game.WingspanEnv() In\u00a0[\u00a0]: Copied! <pre>env.reset()\nplayer = [DummyHeuristic(env) for _ in range(2)]\n# observation, info = env.reset()\n</pre> env.reset() player = [DummyHeuristic(env) for _ in range(2)] # observation, info = env.reset() In\u00a0[\u00a0]: Copied! <pre>episode_over = False\nmax_steps = 10000\nstep_idx = 0\nwhile not episode_over and step_idx &lt; max_steps:\n    step_idx += 1\n    # action = env.action_space.sample()  # agent policy that uses the observation and info\n\n    action = player[env.cur_player_idx()].get_next_action()\n    if VERBOSE:\n        print(\"=========\")\n        print(env._debug_print_state())\n        print(f\"Chose action: {action}\")\n        print(f\"Step: {step_idx}/{max_steps}\")\n\n    if env.step(action) == StepResult.Terminated:\n        print(f\"Score: {env.points()}\")\n        break\n</pre> episode_over = False max_steps = 10000 step_idx = 0 while not episode_over and step_idx &lt; max_steps:     step_idx += 1     # action = env.action_space.sample()  # agent policy that uses the observation and info      action = player[env.cur_player_idx()].get_next_action()     if VERBOSE:         print(\"=========\")         print(env._debug_print_state())         print(f\"Chose action: {action}\")         print(f\"Step: {step_idx}/{max_steps}\")      if env.step(action) == StepResult.Terminated:         print(f\"Score: {env.points()}\")         break In\u00a0[\u00a0]: Copied! <pre>env.close()\n</pre> env.close()"},{"location":"reference/wingspan_gym/__init__/","title":"init","text":"<p>Wingspan Environment is meant to simulate board game Wingspan in compute-friendly way.</p>"},{"location":"reference/wingspan_gym/__init__/#wingspan_gym.StepResult","title":"<code>StepResult</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Internal enum describing result of the action.</p>"},{"location":"reference/wingspan_gym/__init__/#wingspan_gym.WingspanEnv","title":"<code>WingspanEnv()</code>","text":"<p>               Bases: <code>Env</code></p> <p>gym Environment representing a game of Wingspan.</p> <p>It is single-threaded, but efficient offloading vast majority of operations to native implementation.</p>"},{"location":"reference/wingspan_gym/__init__/#wingspan_gym.WingspanEnv.cur_player_idx","title":"<code>cur_player_idx()</code>","text":"<p>Returns index of current player</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Index of current player</p>"},{"location":"reference/wingspan_gym/__init__/#wingspan_gym.WingspanEnv.cur_round","title":"<code>cur_round()</code>","text":"<p>Returns index of current round.</p> <p>Round index can be -1, which means that game is still in setup phase (i.e. players are choosing which resource to discard). It is 0-indexed, so first round is 0. If it is equal to number of round in the game, this means that game is finished and in terminated state.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Index of current round [-1, num_rounds]</p>"},{"location":"reference/wingspan_gym/__init__/#wingspan_gym.WingspanEnv.next_action","title":"<code>next_action()</code>","text":"<p>What is the next action to be taken by current player</p> <p>Returns:</p> Type Description <code>Optional[PyAction]</code> <p>Optional[PyAction]: Next action to be performed. None, if game is in terminated state.</p>"},{"location":"reference/wingspan_gym/__init__/#wingspan_gym.WingspanEnv.points","title":"<code>points()</code>","text":"<p>Current point tally for each of the players.</p> <p>This is calculated as if the game finished right now (although end of game/end of round abilities are not triggered).</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: Current point tally for each of the players.</p>"},{"location":"reference/wingspan_gym/__init__/#wingspan_gym.WingspanEnv.reset","title":"<code>reset(*, seed=None)</code>","text":"<p>Resets environment to initial state.</p> <p>If specified, seed can be used for reproducibility.</p>"},{"location":"reference/wingspan_gym/game/","title":"Game","text":"<p>Main module containing Wingspan Environment.</p>"},{"location":"reference/wingspan_gym/game/#wingspan_gym.game.WingspanEnv","title":"<code>WingspanEnv()</code>","text":"<p>               Bases: <code>Env</code></p> <p>gym Environment representing a game of Wingspan.</p> <p>It is single-threaded, but efficient offloading vast majority of operations to native implementation.</p>"},{"location":"reference/wingspan_gym/game/#wingspan_gym.game.WingspanEnv.cur_player_idx","title":"<code>cur_player_idx()</code>","text":"<p>Returns index of current player</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Index of current player</p>"},{"location":"reference/wingspan_gym/game/#wingspan_gym.game.WingspanEnv.cur_round","title":"<code>cur_round()</code>","text":"<p>Returns index of current round.</p> <p>Round index can be -1, which means that game is still in setup phase (i.e. players are choosing which resource to discard). It is 0-indexed, so first round is 0. If it is equal to number of round in the game, this means that game is finished and in terminated state.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Index of current round [-1, num_rounds]</p>"},{"location":"reference/wingspan_gym/game/#wingspan_gym.game.WingspanEnv.next_action","title":"<code>next_action()</code>","text":"<p>What is the next action to be taken by current player</p> <p>Returns:</p> Type Description <code>Optional[PyAction]</code> <p>Optional[PyAction]: Next action to be performed. None, if game is in terminated state.</p>"},{"location":"reference/wingspan_gym/game/#wingspan_gym.game.WingspanEnv.points","title":"<code>points()</code>","text":"<p>Current point tally for each of the players.</p> <p>This is calculated as if the game finished right now (although end of game/end of round abilities are not triggered).</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: Current point tally for each of the players.</p>"},{"location":"reference/wingspan_gym/game/#wingspan_gym.game.WingspanEnv.reset","title":"<code>reset(*, seed=None)</code>","text":"<p>Resets environment to initial state.</p> <p>If specified, seed can be used for reproducibility.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/","title":"init","text":"<p>Internal package which contents are written in Rust.</p> <p>Vast majority of this package is meant to provide introspection into under-the-hood state of the environment. The main interactivity is provided with <code>step</code> and <code>reset</code> functions, although returns do not follow <code>gymnasium</code> spec.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BirdCard","title":"<code>BirdCard</code>","text":"<p>Represents a bird card in Wingspan.</p> <p>Bird cards are static, and do not track whether the card has been placed, whether it has eggs, tucked cards etc.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BirdCard.bonus_card_membership","title":"<code>bonus_card_membership</code>  <code>property</code>","text":"<p>What bonus cards conditions this card bird card satisfies.</p> <p>Returns:</p> Type Description <code>list[BonusCard]</code> <p>list[BonusCard]: Bonus cards this card works for.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BirdCard.color","title":"<code>color</code>  <code>property</code>","text":"<p>What is the color of bird card</p> <p>Returns:</p> Name Type Description <code>BirdCardColor</code> <code>BirdCardColor</code> <p>Color of the bird card.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BirdCard.cost","title":"<code>cost</code>  <code>property</code>","text":"<p>Cost to play the card.</p> <p>Returns:</p> Type Description <code>tuple[bytes, int, CostAlternative]</code> <p>tuple[bytes, int, CostAlternative]: Cost to play a card, represented as a tuple. Members of this tuples mean:     1. <code>bytes</code> - Bytes of length 5. Each byte represents cost of each FoodIndex to play the card.     2. <code>int</code> - Total number of food that one need to pay to play this card     3. <code>CostAlternative</code> - Whether cost is:         - Alternative (i.e. yes - For example \"Fish/Seed\")         - Cumulative (i.e. no - For example \"Fish + Seed\")</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BirdCard.expansion","title":"<code>expansion</code>  <code>property</code>","text":"<p>What expansion does this belong to.</p> <p>Returns:</p> Name Type Description <code>Expansion</code> <code>Expansion</code> <p>Expansion this card was introduced in.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BirdCard.habitats","title":"<code>habitats</code>  <code>property</code>","text":"<p>What habitats does this belong to.</p> <p>Returns:</p> Type Description <code>list[Habitat]</code> <p>list[Habitat]: Habitats this bird card can be played in.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BirdCard.index","title":"<code>index</code>  <code>property</code>","text":"<p>Unique Index of the card.</p> <p>Since all of the cards are unique in Wingspan, this is also a unique id for instances of cards.</p> <p>They are sequentially increasing across indexes, but not necessarily if only some of the expansions are enabled.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Index of the bird card.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BirdCard.is_predator","title":"<code>is_predator</code>  <code>property</code>","text":"<p>Whether the card is a predator or not.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Whether the card has a predator ability or not.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BirdCard.name","title":"<code>name</code>  <code>property</code>","text":"<p>Common Name of the bird.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Common Name of the bird.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BirdCard.wingspan","title":"<code>wingspan</code>  <code>property</code>","text":"<p>Wingspan size of the bird (in centimeters).</p> <p>Returns:</p> Type Description <code>int | None</code> <p>int | None: Wingspan size of the bird (in centimeters). If the wingspan is None, it corresponds to \"*\" entry (meaning wingspan matches all of the wingspans).</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BonusCard","title":"<code>BonusCard</code>","text":"<p>Represents a bonus card in Wingspan.</p> <p>Bonus cards are static, and do not track whether the card has in players possession etc.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BonusCard.expansion","title":"<code>expansion</code>  <code>property</code>","text":"<p>Which expansion this bonus card belongs to.</p> <p>Returns:</p> Name Type Description <code>Expansion</code> <code>Expansion</code> <p>Expansion this card was introduced in.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BonusCard.index","title":"<code>index</code>  <code>property</code>","text":"<p>Unique Index of the card.</p> <p>Since all of the cards are unique in Wingspan, this is also a unique id for instances of cards.</p> <p>They are sequentially increasing across indexes, but not necessarily if only some of the expansions are enabled.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Index of the bonus card.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BonusCard.name","title":"<code>name</code>  <code>property</code>","text":"<p>Name of the bonus cards.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Title text of the bonus card.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.BonusCard.scoring_rule","title":"<code>scoring_rule</code>  <code>property</code>","text":"<p>How to score this card.</p> <p>Returns:</p> Name Type Description <code>ScoringRule</code> <code>ScoringRule</code> <p>Scoring rule for this card. It is always a tuple with first element being <code>PyScoringRuleType</code>. For more details see <code>ScoringRule</code> documentation.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.CostAlternative","title":"<code>CostAlternative</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Whether Bird Card cost is alternative resources (i.e. \"/\") or cumulative resources (i.e. \"+\")</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.Expansion","title":"<code>Expansion</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum representing different expansions in Wingspan.</p> Note <p>Currently the only supported expansion is \"Core\".</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.Habitat","title":"<code>Habitat</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum representing 3 different habitats in Wingspan.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.Player","title":"<code>Player</code>","text":"<p>Represents a player participating in a game of Wingspan.</p> <p>This class in read-only class that cannot be constructed or altered from python. It does not represented an agent, but rather an internal state of a player tracked by the wingspan environment.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.Player.bird_cards","title":"<code>bird_cards</code>  <code>property</code>","text":"<p>Bird cards currently held in hand of the player.</p> <p>Returns:</p> Type Description <code>list[BirdCard]</code> <p>list[BirdCard]: Bird cards in hand of the player.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.Player.bonus_cards","title":"<code>bonus_cards</code>  <code>property</code>","text":"<p>Bonus cards currently held in hand of the player.</p> <p>Returns:</p> Type Description <code>list[BonusCard]</code> <p>list[BonusCard]: Bonus cards in hand of the player.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.Player.end_of_round_points","title":"<code>end_of_round_points</code>  <code>property</code>","text":"<p>Accumulated end of round points from end of round goals so far.</p> <p>These are added automatically by the environment engine.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Accumulated end of round points from end of round goals so far.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.Player.foods","title":"<code>foods</code>  <code>property</code>","text":"<p>Food tokens that the player currently has.</p> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>Bytes of length 5. Indexes correspond food types as defined in FoodIndex.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.Player.turns_left","title":"<code>turns_left</code>  <code>property</code>","text":"<p>Number of turns left by the current player in this round. If it is the current player, this turn is not included</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Number of turns left by the current player in this round.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.Player.birds_on_mat","title":"<code>birds_on_mat()</code>","text":"<p>Current birds on the player mat.</p> <p>Returns:</p> Type Description <code>list[list[BirdCard]]</code> <p>list[list[BirdCard]]: List of lists of birds. Outer list is always of length 3 corresponding to habitats (in order of Forest, Grassland, Wetland). Inner list are birds placed in that habitat.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.PyAction","title":"<code>PyAction</code>","text":"<p>A type of action that can be performed.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.PyAction.__str__","title":"<code>__str__()</code>","text":"<p>String representation of this PyAction.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.PyScoringRuleType","title":"<code>PyScoringRuleType</code>","text":"<p>Different types of scoring bonus cards based on number of birds satisfying condition.</p> <p>For more details see <code>ScoringRule</code> documentation.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.PyWingspanEnv","title":"<code>PyWingspanEnv(hand_limit=None, num_players=None)</code>","text":"<p>Initializes environment with specified number of players. Additionally it enforces hand limit, which in turn can limits size of action space.</p> <p>Parameters:</p> Name Type Description Default <code>hand_limit</code> <code>Optional[int]</code> <p>Maximum size of hand (bird cards only) allowed for player to have. Defaults to 20.</p> <code>None</code> <code>num_players</code> <code>Optional[int]</code> <p>Number of players in a game. Note, that going way above the regular max number of players (5), might cause instability. Defaults to 2.</p> <code>None</code>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.PyWingspanEnv.player_idx","title":"<code>player_idx</code>  <code>property</code>","text":"<p>Index of a current player.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.PyWingspanEnv.round_idx","title":"<code>round_idx</code>  <code>property</code>","text":"<p>Index of a current round played.</p> <p>It is 0-indexed, with 3 as a max value. -1 indicates setup phase, when player chooses which resources/cards to discard.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.PyWingspanEnv._debug_get_state","title":"<code>_debug_get_state()</code>","text":"<p>Highly variable function used for debugging.</p> <p>Returns a lot of information about game, but not in an efficient manner.</p> <p>Unless you are actively developing code in wingspan env repo, avoid using it</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.PyWingspanEnv.action_space_size","title":"<code>action_space_size()</code>","text":"<p>Current allowed action space size.</p> <p>Not all of the actions are necessarily allowed, even if they lie within the action space.</p> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>Optional[int]: Size of action space. None, if game is in terminated state.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.PyWingspanEnv.next_action","title":"<code>next_action()</code>","text":"<p>Returns what the next action type is.</p> <p>Returns:</p> Type Description <code>Optional[PyAction]</code> <p>Optional[PyAction]: Next action to be performed. None, if game is in terminated state.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.PyWingspanEnv.points","title":"<code>points()</code>","text":"<p>Number of points on per-player basis</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: List of current point tally for each player</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.PyWingspanEnv.reset","title":"<code>reset(seed)</code>","text":"<p>Resets the environment bringing it to the beginning of setup phase.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>Optional[int]</code> <p>Random seed to use when setting up a game.</p> required"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.PyWingspanEnv.step","title":"<code>step(action_idx)</code>","text":"<p>Performs a step for a current player.</p> <p>Parameters:</p> Name Type Description Default <code>action_idx</code> <code>int</code> <p>Index of action to take. This is highly game state dependent, and implementation/guide of the various possible contexts is in the works.</p> required <p>Returns:</p> Name Type Description <code>StepResult</code> <code>StepResult</code> <p>StepResult indicating whether action was successful or not, and basic feedback about game state.</p>"},{"location":"reference/wingspan_gym/_internal/__init__/#wingspan_gym._internal.StepResult","title":"<code>StepResult</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Internal enum describing result of the action.</p>"}]}